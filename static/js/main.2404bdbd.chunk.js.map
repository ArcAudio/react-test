{"version":3,"sources":["components/sketch.js","components/App.js","serviceWorker.js","index.js"],"names":["sketch","p","grid","cols","rows","cellx","celly","make2DArray","arr","Array","i","length","countNeighbors","x","y","sum","j","row","setup","createCanvas","width","height","floor","random","draw","background","fill","stroke","ellipse","next","state","neighbors","mouseIsPressed","Math","round","mouseX","mouseY","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mint","colour","contract","methods","send","from","account","once","receipt","setState","colours","concat","toConsumableArray","totalSupply","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","Colour","networks","abi","address","Contract","console","log","_this2","react_default","a","createElement","className","href","target","rel","id","role","Fragment","dist_default","onSubmit","event","preventDefault","value","type","placeholder","ref","input","map","key","style","backgroundColor","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2404bdbd.chunk.js","sourcesContent":["function sketch(p)\n{\n  let rotation = 0;\n  let grid;\n  let cols;\n  let rows;\n  let circleSize = 10;\n  let resolution = 20;\n  let cellx;\n  let celly;\n  let gridX\n  let gridY;\n\n  function make2DArray(cols, rows){\n    let arr = new Array(cols);\n    for(let i = 0; i < arr.length; i++)\n    {\n      arr[i] = new Array(rows);\n\n    }\n    return arr;\n  }\n\n  function countNeighbors(grid, x, y){\n  let sum = 0;\n  for (let i = -1; i < 2; i++){\n    for (let j = -1; j < 2; j++)\n    {\n\n      let col = (x + i + cols) % cols;\n      let row = (y + j + rows) % rows;\n\n      sum += grid[col][row];\n    }\n  }\n\n  sum -= grid[x][y];\n  return sum;\n\n}\n\n  p.setup = function ()\n  {\n    //p.createCanvas(500,500);\n  p.createCanvas(800,800);\n\n  cols = p.width / resolution;\n  rows = p.height / resolution;\n  grid = make2DArray(cols,rows);\n  for(let i = 0; i < cols; i++) {\n    for (let j = 0; j < rows; j++){\n      grid[i][j] = p.floor(p.random(4));\n      //grid[i][j] = 0;\n      //grid [0][0] = 1;\n      }\n    }\n  };\n\n  p.draw = function(){\n        p.background(255,255,255);\n  for(let i = 0; i < cols; i++){\n    for (let j = 0; j < rows; j++){\n      let x = i * resolution;\n      let y = j * resolution;\n      // fill(255,255,255);\n      // stroke(0,0,0);\n      // rect(x,y,resolution-1,resolution-1);\n\n      if (grid[i][j] == 1){\n        p.fill(255,0,0);\n        p.stroke(255);\n        //p.rect(x,y,resolution-1 + circleSize,resolution-1 + circleSize);\n        //circle(x,y,10);\n        p.ellipse(x, y, 5+circleSize, 5+circleSize);\n      }\n\n         if (grid[i][j] == 2){\n        p.fill(127,0,127);\n        p.stroke(255);\n        //p.rect(x,y,resolution-1 + circleSize,resolution-1 + circleSize);\n        //circle(x,y,10);\n        p.ellipse(x, y, 5+circleSize, 5+circleSize);\n      }\n\n         if (grid[i][j] == 3){\n        p.fill(127);\n        p.stroke(255);\n        //p.rect(x,y,resolution-1 + circleSize,resolution-1 + circleSize);\n        //circle(x,y,10);\n        p.ellipse(x, y, 5+circleSize, 5+circleSize);\n      }\n    }\n  }\n\n  let next = make2DArray(cols,rows);\n  for(let i = 0; i < cols; i++){\n    for (let j = 0; j < rows; j++){\n      let state = grid[i][j];\n\n      //count neighbours\n      let sum = 0;\n      let neighbors = countNeighbors(grid,i,j);\n\n      if (state == 0 && neighbors == 3)\n      {\n        next[i][j] = 1;\n      } else if (state == 1 && (neighbors < 2 || neighbors > 3)) {\n        next[i][j] = 0;\n      } else {\n        next[i][j] = state;\n        }\n    }\n  }\n  grid = next;\n    if(p.mouseIsPressed)\n    {\n      cellx = Math.round((p.mouseX) / resolution);\n      celly = Math.round((p.mouseY) / resolution);\n       //console.log('The value of cellx is ' + cellx);\n      // print('The value of celly is ' + celly);\n\n      if (cellx > 0)\n      {\n        if (cellx < cols) {\n        grid[cellx][celly] = 1; \n        }       \n      }\n\n      //circleSize = 10;\n      //p.fill(0);\n    }\n    // else{\n    //   circleSize = 20;\n    //   //p.fill(255);\n    // }\n    //p.ellipse(p.mouseX, p.mouseY,80,80);\n\n    // if (p.mouseReleased)\n    // {\n    //   circleSize = 0;\n    //}\n  };\n};\n\n\n\nexport default sketch;","import React, { Component } from 'react';\nimport Web3 from 'web3'\n//import Sketch from 'react-p5'\n//import logo from '../logo.png';\nimport P5Wrapper from 'react-p5-wrapper';\nimport sketch from './sketch'\nimport './App.css';\nimport Colour from '../abis/Colour.json'\n\nclass App extends Component {\n\n\n  // const setup = (p5, canvasParentRef) => {\n  //   p5.createCanvas(500, 400).parent(canvasParentRef)\n  // }\n  \n  // const draw = p5 => {\n  //   p5.background(255, 130, 20)\n  //   p5.ellipse(100, 100, 100)\n  //   p5.ellipse(300, 100, 100)\n  // }\n\n\n    async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n    async loadBlockchainData() {\n    const web3 = window.web3\n\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    \n    const networkId = await web3.eth.net.getId()\n    const networkData = Colour.networks[networkId] \n\n    if (networkData)\n    {\n      const abi = Colour.abi\n      const address = networkData.address\n      const contract = new web3.eth.Contract(abi,address)\n     //console.log(contract)\n\n     this.setState({contract})\n     const totalSupply = await contract.methods.totalSupply().call()\n     this.setState({totalSupply})\n     //load colours\n\n\n    for(var i = 1; i <= totalSupply; i++)\n    {\n      const colour = await contract.methods.colours(i - 1).call()\n      this.setState({\n        colours: [...this.state.colours, colour]\n      })\n      //result.push(colour)\n    }\n    console.log(this.state.colours)\n    } else\n    {\n      window.alert('Smart contract not deployed to detected netork')\n    }\n\n  }\n\n  mint = (colour) => {\n\n    this.state.contract.methods.mint(colour).send({ from: this.state.account })\n    .once('receipt',(receipt) => {\n      this.setState({\n        colours: [...this.state.colours, colour]\n      })\n    })\n  }\n\n    constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n       contract: null,\n       totalSupply: 0,\n       colours: []\n    }\n  }\n\n  //  randomColor(){\n  //   this.setState({color:[Math.random()*255, Math.random()*255, Math.random()*255]}\n  //   )\n  // }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"http://www.dappuniversity.com/bootcamp\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Game of Life Tokens\n          </a>\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n              <small className=\"text-white\"><span id=\"account\">{this.state.account}</span></small>\n            </li>\n          </ul>\n\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <>\n                  <P5Wrapper sketch={sketch} />\n                </>\n            <h1>Issue Life Token</h1>\n            <form onSubmit = {(event) => {\n              event.preventDefault()\n              const colour = this.colour.value\n              this.mint(colour)\n            }}>\n              <input \n              type ='text'\n              className ='form-control mb-1'\n              placeholder='e.g. (2,2)'\n              ref = {(input) => { this.colour = input }}\n              />\n              <input \n                type ='submit' \n                className='btn btn-block btn-primary'\n                value ='MINT'\n                />\n              </form>\n              </div>\n            </main>\n          </div>\n          <hr/>\n          <div className=\"row text-center\">\n          { this.state.colours.map((colour,key) => {\n            return(\n            <div key={key} className=\"col-md-3 mb-3\">\n            <div className =\"token\" style ={{backgroundColor: colour}}></div>\n            <div>{colour}</div>\n            </div>\n            )\n          })}\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}